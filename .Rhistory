setwd("F:/mygits/PML_Assgn")
library(caret);library(kernlab)
# download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv")
# download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv")
toTrain <- read.csv("pml-training.csv")
toTest <- read.csv("pml-testing.csv")
vars <- c("accel_arm_x","accel_arm_y","accel_arm_z",
"accel_belt_x","accel_belt_y","accel_belt_z",
"accel_dumbbell_x","accel_dumbbell_y","accel_dumbbell_z")
keep <- c(vars,"problem_id")
toTest <- toTest[,keep]
keep <- c(vars,"classe")
toTrain <- toTrain[,keep]
set.seed(54321)
inBuild <- createDataPartition(toTrain$classe, p = 0.7, list=FALSE)
validation <- toTrain[-inBuild,];buildData <- toTrain[inBuild,]
inTrain <- createDataPartition(buildData$classe, p = 0.7, list=FALSE)
testing <- buildData[-inTrain,];training <- buildData[inTrain,]
rm(toTrain);rm(buildData);rm(inBuild);rm(inTrain)
set.seed(12345)
set.seed(12345)
mod1 <- train(classe~., method="gbm",data=training,verbose=FALSE,
trControl=trainControl(method="repeatedcv",number=5,repeats=1))
mod2 <- train(classe~., method="rf", data=training,
trControl=trainControl(method="cv",number=3))
setwd("F:/mygits/PML_Assgn")
library(caret);library(kernlab)
# download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv")
# download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv")
toTrain <- read.csv("pml-training.csv")
toTest <- read.csv("pml-testing.csv")
vars <- c("roll_arm","pitch_arm","roll_belt","pitch_belt","roll_dumbbell","pitch_dumbbell")
keep <- c(vars,"problem_id")
toTest <- toTest[,keep]
keep <- c(vars,"classe")
toTrain <- toTrain[,keep]
set.seed(54321)
inBuild <- createDataPartition(toTrain$classe, p = 0.7, list=FALSE)
validation <- toTrain[-inBuild,];buildData <- toTrain[inBuild,]
inTrain <- createDataPartition(buildData$classe, p = 0.7, list=FALSE)
testing <- buildData[-inTrain,];training <- buildData[inTrain,]
rm(toTrain);rm(buildData);rm(inBuild);rm(inTrain)
set.seed(12345)
mod1 <- train(classe~., method="gbm",data=training,verbose=FALSE,
trControl=trainControl(method="repeatedcv",number=5,repeats=1))
mod2 <- train(classe~., method="rf", data=training,
trControl=trainControl(method="cv",number=3))
warnings()
save()
save(toTrain)
setwd("F:/mygits/PML_Assgn")
library(caret);library(kernlab)
# download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv")
# download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv")
toTrain <- read.csv("pml-training.csv")
toTest <- read.csv("pml-testing.csv")
vars <- c("roll_arm","pitch_arm","roll_belt","pitch_belt","roll_dumbbell","pitch_dumbbell")
keep <- c(vars,"problem_id")
toTest <- toTest[,keep]
keep <- c(vars,"classe")
toTrain <- toTrain[,keep]
## now both sets are cleaned up.
save(toTrain)
save(toTest)
?save
save(toTrain,toTest,file="pml.RData")
load("pml.RData")
setwd("F:/mygits/PML_Assgn")
set.seed(54321)
inBuild <- createDataPartition(toTrain$classe, p = 0.7, list=FALSE)
validation <- toTrain[-inBuild,];buildData <- toTrain[inBuild,]
inTrain <- createDataPartition(buildData$classe, p = 0.7, list=FALSE)
testing <- buildData[-inTrain,];training <- buildData[inTrain,]
rm(toTrain);rm(buildData);rm(inBuild);rm(inTrain)
setwd("F:/mygits/PML_Assgn")
library(caret);library(kernlab)
# download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv")
# download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv")
toTrain <- read.csv("pml-training.csv")
toTest <- read.csv("pml-testing.csv")
vars <- c("roll_arm","pitch_arm","roll_belt","pitch_belt","roll_dumbbell","pitch_dumbbell")
keep <- c(vars,"problem_id")
toTest <- toTest[,keep]
keep <- c(vars,"classe")
toTrain <- toTrain[,keep]
## now both sets are cleaned up.
save(toTest,file="pmltest.RData")
save(toTrain,file="pmltrain.RData")
setwd("F:/mygits/PML_Assgn");library(caret);library(kernlab)
load("pmltest.RData");load("pmltrain.RData")
set.seed(54321)
inBuild <- createDataPartition(toTrain$classe, p = 0.7, list=FALSE)
validation <- toTrain[-inBuild,];buildData <- toTrain[inBuild,]
inTrain <- createDataPartition(buildData$classe, p = 0.7, list=FALSE)
testing <- buildData[-inTrain,];training <- buildData[inTrain,]
rm(toTrain);rm(buildData);rm(inBuild);rm(inTrain)
set.seed(12345)
mod1 <- train(classe~., method="gbm",data=training,verbose=FALSE,
trControl=trainControl(method="repeatedcv",number=5,repeats=1))
mod2 <- train(classe~., method="rf", data=training,
trControl=trainControl(method="cv",number=3))
save(mod1,file="mod1.RData")
setwd("F:/mygits/PML_Assgn");library(caret);library(kernlab)
load("pmltest.RData");load("pmltrain.RData")
set.seed(54321)
inBuild <- createDataPartition(toTrain$classe, p = 0.7, list=FALSE)
validation <- toTrain[-inBuild,];buildData <- toTrain[inBuild,]
inTrain <- createDataPartition(buildData$classe, p = 0.7, list=FALSE)
testing <- buildData[-inTrain,];training <- buildData[inTrain,]
rm(toTrain);rm(buildData);rm(inBuild);rm(inTrain)
mod2 <- train(classe~., method="rf", data=training,
trControl=trainControl(method="cv",number=3))
save(mod2,file="mod2.RData")
setwd("F:/mygits/PML_Assgn");library(caret);library(kernlab)
load("pmltest.RData");load("pmltrain.RData")
set.seed(54321)
inBuild <- createDataPartition(toTrain$classe, p = 0.7, list=FALSE)
validation <- toTrain[-inBuild,];buildData <- toTrain[inBuild,]
inTrain <- createDataPartition(buildData$classe, p = 0.7, list=FALSE)
testing <- buildData[-inTrain,];training <- buildData[inTrain,]
rm(toTrain);rm(buildData);rm(inBuild);rm(inTrain)
load("mod1.RData");load("mod2.RData")
pred1 <- predict(mod1,testing)
pred2 <- predict(mod2,testing)
qplot(pred1,pred2,colour=classe,data=testing)
predDF <-data.frame(pred1,pred2,classe=testing$classe)
combModFit <- train(classe~., method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
sqrt(sum((pred1-testing$classe)^2))
cm1<-confusionMatrix(pred1,testing$classe)
cm2<-confusionMatrix(pred2,testing$classe)
cmx <-confusionMatrix(combPred,testing$classe)
cm1
accuracy1 <- cm1$overall[1]
accuracy2 <- cm2$overall[1]
accuracyX <- cmx$overall[1]
accuracy1
accuracy2
accuracyX
combModFit <- train(classe~., method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
cmx <-confusionMatrix(combPred,testing$classe)
accuracyX <- cmx$overall[1]
accuracyX
pred1v <- predict(mod1,validation)
pred2v <- predict(mod2,validation)
predvDF <- data.frame(pred1=pred1v,pred2=pred2v)
combPredv <- predict(combModFit,predvDF)
cm1v<-confusionMatrix(pred1v,testing$classe)
cm2v<-confusionMatrix(pred2v,testing$classe)
cmxv <-confusionMatrix(combPredv,testing$classe)
accuracy1v <- cm1v$overall[1]
accuracy2v <- cm2v$overall[1]
accuracyXv <- cmxv$overall[1]
pred1v <- predict(mod1,validation)
pred2v <- predict(mod2,validation)
predvDF <- data.frame(pred1=pred1v,pred2=pred2v)
combPredv <- predict(combModFit,predvDF)
cm1v<-confusionMatrix(pred1v,validation$classe)
cm2v<-confusionMatrix(pred2v,validation$classe)
cmxv <-confusionMatrix(combPredv,validation$classe)
accuracy1v <- cm1v$overall[1]
accuracy2v <- cm2v$overall[1]
accuracyXv <- cmxv$overall[1]
accuracy1v
accuracy2v
accuracyXv
pred1v <- predict(mod1,toTest[,1:59])
pred2v <- predict(mod2,toTest[,1:59])
predvDF <- data.frame(pred1=pred1v,pred2=pred2v)
combPredv <- predict(combModFit,predvDF)
colnames(toTest)
pred1v <- predict(mod1,toTest[,1:6])
pred2v <- predict(mod2,toTest[,1:6])
predvDF <- data.frame(pred1=pred1v,pred2=pred2v)
combPredv <- predict(combModFit,predvDF)
combPredv
pred1v <- predict(mod1,toTest[,1:6])
pred2v <- predict(mod2,toTest[,1:6])
predvDF <- data.frame(pred1=pred1v,pred2=pred2v)
combPredv <- predict(combModFit,predvDF)
result$problem_id <- toTest$problem_id
result$prediction <- combPredv
result
result <- rep(NA,20)
result$problem_id <- toTest$problem_id
result$prediction <- combPredv
result
```
result <- rep(NA,20,2)
result$problem_id <- toTest$problem_id
result$prediction <- combPredv
result
?data.frame
result <- data.frame(problem_id = toTest$problem_id,
prediction <- combPredv)
result
result <- data.frame(problem_id = toTest$problem_id,
prediction = combPredv)
result
cmx
cmxv
